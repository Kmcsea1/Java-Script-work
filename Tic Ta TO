import java.util.Scanner;
import java.util.Arrays;

class SafeInput {

    static int getRangedInt(Scanner console, String prompt, int low, int high) {
        int input;
        do {
            System.out.print(prompt + " (" + low + " to " + high + "): ");
            input = console.nextInt();
        } while (input < low || input > high);
        return input;
    }

    static boolean getYNConfirm(Scanner console, String prompt) {
        String response;
        System.out.print(prompt + " (Y/N): ");
        response = console.next();
        return response.equalsIgnoreCase("Y");
    }
}

class TicTacToe {
    static final int ROWS = 3;
    static final int COLS = 3;
    static String[][] board = new String[ROWS][COLS];

    public static void main(String[] args) {
        Scanner console = new Scanner(System.in);
        String currentPlayer = "X";
        int moveCount = 0;

        clearBoard();
        boolean gameOn = true;

        while (gameOn) {
            display();
            int row = SafeInput.getRangedInt(console, "Enter row", 1, 3) - 1;
            int col = SafeInput.getRangedInt(console, "Enter column", 1, 3) - 1;

            if (isValidMove(row, col)) {
                board[row][col] = currentPlayer;
                moveCount++;
                if (isWin(currentPlayer)) {
                    display();
                    System.out.println(currentPlayer + " wins!");
                    gameOn = false;
                } else if (isTie(moveCount)) {
                    display();
                    System.out.println("It's a tie!");
                    gameOn = false;
                } else {
                    currentPlayer = currentPlayer.equals("X") ? "O" : "X";
                }
            } else {
                System.out.println("Invalid move. Try again.");
            }
        }

        if (SafeInput.getYNConfirm(console, "Play again?")) {
            clearBoard();
            main(args); // Restart the game
        }
    }

    static void clearBoard() {
        for (String[] row : board) {
            Arrays.fill(row, " ");
        }
    }

    static void display() {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                System.out.print(board[i][j] + (j < COLS - 1 ? " | " : ""));
            }
            System.out.println();
            if (i < ROWS - 1) {
                System.out.println("---------");
            }
        }
    }

    static boolean isValidMove(int row, int col) {
        return board[row][col].equals(" ");
    }

    static boolean isWin(String player) {
        return isRowWin(player) || isColWin(player) || isDiagonalWin(player);
    }

    static boolean isRowWin(String player) {
        for (int i = 0; i < ROWS; i++) {
            if (board[i][0].equals(player) && board[i][1].equals(player) && board[i][2].equals(player)) {
                return true;
            }
        }
        return false;
    }

    static boolean isColWin(String player) {
        for (int i = 0; i < COLS; i++) {
            if (board[0][i].equals(player) && board[1][i].equals(player) && board[2][i].equals(player)) {
                return true;
            }
        }
        return false;
    }

    static boolean isDiagonalWin(String player) {
        return (board[0][0].equals(player) && board[1][1].equals(player) && board[2][2].equals(player)) ||
               (board[0][2].equals(player) && board[1][1].equals(player) && board[2][0].equals(player));
    }

    static boolean isTie(int moveCount) {
        return moveCount >= ROWS * COLS;
    }
}
